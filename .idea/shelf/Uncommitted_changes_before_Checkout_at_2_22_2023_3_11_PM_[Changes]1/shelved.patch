Index: app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pulmonaryrehabilitation.model_since_2_17\r\n\r\nimport com.example.pulmonaryrehabilitation.model_database.DatabaseMethod\r\n\r\n/*\r\nCurrentUser Object Specification\r\nThis is the connection to the users data. Anything you want to get or change, should be done through this.\r\nIt is a singleton because of the nature of need. We will need it on almost every activity and so passing it around\r\nseems like a poor implementation.\r\nPre-Condition:\r\ngetUserDataFor() in Database method needs to be called on a valid user ID otherwise everything will return null\r\nPost-Condition:\r\nAllow developers access to the relevant user data through internal methods.\r\n\r\nIan Kohlert\r\nFeb 19, 2023\r\n */\r\nobject CurrentUser {\r\n    private var data: MemberClass? = null\r\n\r\n    /*\r\n    setData Method Specification\r\n    Pre-Condition:\r\n        Pass in a nullable Member Class. Other than testing, this will only be done via the method\r\n        getUserDataFor() in the DatabaseMethod file.\r\n    Post-Condition\r\n        Sets the users data in the CurrentUser object.\r\n     */\r\n    fun setData(member: MemberClass?) {\r\n        data = member\r\n        // Testing â†“\r\n//        setGoal(3333)\r\n//        addStepHistory(4999)\r\n    }\r\n\r\n    // GETTERS\r\n    /* Specification for each getter\r\n        Pre-Condition: None\r\n        Post-Condition:\r\n            It will return the desired value if 'data' has been set with a valid memberClass object\r\n            If not it returns a default value via the elvis operator (?:)\r\n            The goal of the default value is to make it clear that there was an error\r\n\r\n     */\r\n    fun getFirstName(): String {\r\n        return data?.firstName ?: \"Error\"\r\n    }\r\n    fun getLastName(): String {\r\n        return data?.lastName ?: \"Error\"\r\n    }\r\n    fun getStepGoal(): Int {\r\n        return data?.stepGoal ?: -9999\r\n    }\r\n    fun getStepHistory(): Map<String, StepHistoryClass> {\r\n        return data?.stepHistory ?: mutableMapOf()\r\n    }\r\n    fun getGamificationHistory(): Map<String, GamificationHistoryClass> {\r\n        return data?.gamificationHistory ?: mutableMapOf()\r\n    }\r\n    fun getUsageHistory(): Map<String, UsageHistoryClass> {\r\n        return data?.usageHistory ?: mutableMapOf()\r\n    }\r\n    fun getQuestionnaireHistory(): Map<String, QuestionnaireHistoryClass> {\r\n        return data?.questionnaireHistory ?: mutableMapOf()\r\n    }\r\n    // END GETTERS\r\n\r\n\r\n    // SETTERS\r\n    /*\r\n    Specification for each setter\r\n    Pre-Condition:\r\n        The new value you wish to add to the database\r\n    Post-Condition:\r\n        Updates the local 'data' object to avoid an unnecessary read\r\n        Updates the Firebase database\r\n\r\n     // note for below, it's safe to use !! because I check it's not null\r\n\r\n     TODO: create a function that creates a timestap and replace the hard coded 'Timestamp' string\r\n     TODO: Once we can append to Firebase objects the collection write functions need to be\r\n      updated to only send the new value\r\n\r\n     */\r\n    fun setFirstName(newName: String) {\r\n        if (data != null) {\r\n            data?.firstName = newName\r\n            DatabaseMethod().updateFirstNameFor(data!!.id, newName)\r\n        }\r\n    }\r\n\r\n    fun setLastName(newName: String) {\r\n        if (data != null) {\r\n            data?.lastName = newName\r\n            DatabaseMethod().updateLastNameFor(data!!.id, newName)\r\n        }\r\n    }\r\n    fun setAdminStatus(newStatus: Boolean) {\r\n        if (data != null) {\r\n            data?.isAdmin = newStatus\r\n            DatabaseMethod().updateAdminStatusFor(data!!.id, newStatus)\r\n        }\r\n    }\r\n    fun setGoal(newGoal: Int) {\r\n        if (data != null) {\r\n            data?.stepGoal = newGoal\r\n            DatabaseMethod().updateStepCountGoalFor(data!!.id, newGoal)\r\n        }\r\n    }\r\n    fun addStepHistory(numberSteps: Int) {\r\n        if (data != null) {\r\n            data!!.stepHistory.put(\"Timestamp\", StepHistoryClass(numberSteps.toString(), \"\"))\r\n            DatabaseMethod().updateStepHistoryFor(data!!.id, data!!.stepHistory)\r\n        }\r\n    }\r\n    fun addQuestionnaireHistory(question: String, answer: String) {\r\n        if (data != null) {\r\n            data!!.questionnaireHistory.put(\"Timestamp\", QuestionnaireHistoryClass(question, answer))\r\n            DatabaseMethod().updateQuestionnaireHistoryFor(data!!.id, data!!.questionnaireHistory)\r\n        }\r\n    }\r\n    fun addUsageHistory(exerciseDone: String) {\r\n        if (data != null) {\r\n            data!!.usageHistory.put(\"Timestamp\", UsageHistoryClass(exerciseDone, \"\"))\r\n            DatabaseMethod().updateUsageHistoryFor(data!!.id, data!!.usageHistory)\r\n        }\r\n    }\r\n    fun addGamificationHistory(event: String, points: String) {\r\n        if (data != null) {\r\n            data!!.gamificationHistory.put(\"Timestamp\", GamificationHistoryClass(event, points))\r\n            DatabaseMethod().updateGamificationHistory(data!!.id, data!!.gamificationHistory)\r\n        }\r\n    }\r\n\r\n    // END SETTERS\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt b/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt
--- a/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt	
+++ b/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt	
@@ -1,6 +1,7 @@
 package com.example.pulmonaryrehabilitation.model_since_2_17
 
 import com.example.pulmonaryrehabilitation.model_database.DatabaseMethod
+import java.text.SimpleDateFormat
 
 /*
 CurrentUser Object Specification
@@ -63,9 +64,12 @@
     fun getQuestionnaireHistory(): Map<String, QuestionnaireHistoryClass> {
         return data?.questionnaireHistory ?: mutableMapOf()
     }
+    fun getCurrentTime(): String {
+        var dateAndTime = SimpleDateFormat("dd/MM/yyyy HH:mm:ss")
+        return dateAndTime.toString()
+    }
     // END GETTERS
 
-
     // SETTERS
     /*
     Specification for each setter
@@ -77,7 +81,7 @@
 
      // note for below, it's safe to use !! because I check it's not null
 
-     TODO: create a function that creates a timestap and replace the hard coded 'Timestamp' string
+     TODO: create a function that creates a timestamp and replace the hard coded 'Timestamp' string
      TODO: Once we can append to Firebase objects the collection write functions need to be
       updated to only send the new value
 
@@ -109,25 +113,29 @@
     }
     fun addStepHistory(numberSteps: Int) {
         if (data != null) {
-            data!!.stepHistory.put("Timestamp", StepHistoryClass(numberSteps.toString(), ""))
+            var timestamp = getCurrentTime()
+            data!!.stepHistory.put(timestamp, StepHistoryClass(numberSteps.toString(), ""))
             DatabaseMethod().updateStepHistoryFor(data!!.id, data!!.stepHistory)
         }
     }
     fun addQuestionnaireHistory(question: String, answer: String) {
         if (data != null) {
-            data!!.questionnaireHistory.put("Timestamp", QuestionnaireHistoryClass(question, answer))
+            var timestamp = getCurrentTime()
+            data!!.questionnaireHistory.put(timestamp, QuestionnaireHistoryClass(question, answer))
             DatabaseMethod().updateQuestionnaireHistoryFor(data!!.id, data!!.questionnaireHistory)
         }
     }
     fun addUsageHistory(exerciseDone: String) {
         if (data != null) {
-            data!!.usageHistory.put("Timestamp", UsageHistoryClass(exerciseDone, ""))
+            var timestamp = getCurrentTime()
+            data!!.usageHistory.put(timestamp, UsageHistoryClass(exerciseDone, ""))
             DatabaseMethod().updateUsageHistoryFor(data!!.id, data!!.usageHistory)
         }
     }
     fun addGamificationHistory(event: String, points: String) {
         if (data != null) {
-            data!!.gamificationHistory.put("Timestamp", GamificationHistoryClass(event, points))
+            var timestamp = getCurrentTime()
+            data!!.gamificationHistory.put(timestamp, GamificationHistoryClass(event, points))
             DatabaseMethod().updateGamificationHistory(data!!.id, data!!.gamificationHistory)
         }
     }
Index: app/src/main/java/com/example/pulmonaryrehabilitation/model_database/DatabaseMethod.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pulmonaryrehabilitation.model_database\r\n\r\nimport android.content.ContentValues\r\nimport android.util.Log\r\nimport com.example.pulmonaryrehabilitation.model_since_2_17.*\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\n\r\nclass DatabaseMethod : DatabaseInterface {\r\n\r\n\r\n    override fun readFromDatabase(path: String, data: FirebaseDatabase) {\r\n        val myRef = data.getReference(path)\r\n        val dataListener = object : ValueEventListener {\r\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                for (child in dataSnapshot.children) {\r\n                    // for now we get all kind of children, but later we must use getValue to get the object we want\r\n                    // For example, to get member  object, implement this line, make sure the path is \"Member\"\r\n//                     val mem = child.getValue<MemberClass>()\r\n//                     Log.d(\"Child\", mem.toString())\r\n                    Log.d(\"Child\", child.toString())\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(databaseError: DatabaseError) {\r\n                // Getting Member failed, log a message\r\n                Log.w(ContentValues.TAG, \"loadMember:onCancelled\", databaseError.toException())\r\n            }\r\n        }\r\n        myRef.addValueEventListener(dataListener)\r\n    }\r\n\r\n    // add the input obj into Firebase database if the id is not existed,\r\n    // if its id is already existed in the database, it will update the value according to its id\r\n    override fun writeToDatabase(path: String, data: FirebaseDatabase, obj: Any) {\r\n        val myRef = data.getReference(path)\r\n        var key = \"\"\r\n        var values: Any = \"\"\r\n\r\n        // switch cases\r\n        when (path) {\r\n            \"Member\" -> {\r\n                val mem = obj as MemberClass // initialize class\r\n                key = mem.id // initialize key\r\n                values = mem.toMemberMap() // initialize value\r\n            }\r\n            \"ExerciseData\" -> {\r\n                val exe = obj as ExerciseDataClass // initialize class\r\n                key = exe.id // initialize key\r\n                values = exe.toExerciseDataMap() // initialize value\r\n            }\r\n            \"Gamification\" -> {\r\n                TODO(\"initialize data\")\r\n            }\r\n            \"GamificationQuest\" -> {\r\n                TODO(\"initialize data\")\r\n            }\r\n            \"StepGoal\" -> {\r\n                TODO(\"initialize data\")\r\n            }\r\n            \"StepHistory\" -> {\r\n                TODO(\"initialize data\")\r\n            }\r\n            \"UsageHistory\" -> {\r\n                TODO(\"initialize data\")\r\n            }\r\n            else -> {\r\n                Log.d(\"writeToDatabase\", \"path exception\")\r\n            }\r\n        }\r\n\r\n        // put key and its value to hashmap\r\n        val childUpdates = hashMapOf<String, Any>(\r\n            \"$key\" to values,\r\n        )\r\n\r\n        // write new or update object as json string to path\r\n        // updateChildren is pre-built Firebase method to update and create children\r\n        // if the id is already existed in the database then the value will be updated instead of\r\n        // adding\r\n        myRef.updateChildren(childUpdates)\r\n    }\r\n\r\n\r\n    override fun deleteFromDatabase(path: String, data: FirebaseDatabase, id: String) {\r\n        val myRef = data.getReference(path)\r\n\r\n        // 2 way for deleting data with specified path and key (id)\r\n        // removeValue is a pre-built Firebase method to delete object\r\n//        myRef.child(id).removeValue()\r\n        myRef.child(id).setValue(null)\r\n    }\r\n\r\n    // INDIVIDUAL USER METHODS\r\n    /*\r\n     getUserDataFor Specification\r\n     Pre-Condition:\r\n        id: the users ID\r\n        database: reference to our database\r\n    Post-Condition:\r\n        Sets the data in CurrentUser object\r\n        Logs failure\r\n\r\n    Note: there is a 99.9% chance you shouldn't call this function in your code.\r\n     */\r\n    fun getUserDataFor(id: String, database: FirebaseDatabase) {\r\n        val myRef = database.getReference(\"Member/$id\")\r\n        myRef.get().addOnSuccessListener {\r\n//            Log.i(\"firebase\", \"Got value ${it.value}\")\r\n            CurrentUser.setData(convertFirebaseDataToMember(it.value as HashMap<String, Any>))\r\n\r\n        }.addOnFailureListener {\r\n            Log.e(\"firebase\", \"Error getting data\", it)\r\n        }\r\n    }\r\n\r\n    /* convertFirebaseDataToMember Specification\r\n    Pre-Condition:\r\n        data: HashMap<String, Any>\r\n        this is the raw data from firebase\r\n    Post-Condition\r\n         returns a MemberClass object populated with the data\r\n     */\r\n    private fun convertFirebaseDataToMember(data: HashMap<String, Any>): MemberClass? {\r\n        val member = MemberClass(\r\n            data.get(\"id\") as String, data.get(\"isAdmin\") as Boolean, data.get(\"firstName\") as String,\r\n            data.get(\"lastName\") as String, data.get(\"username\") as String, data.get(\"email\") as String,\r\n            (data.get(\"stepGoal\") as Long).toInt(),\r\n            data.get(\"gamificationHistory\") as MutableMap<String, GamificationHistoryClass>,\r\n            data.get(\"usageHistory\") as MutableMap<String, UsageHistoryClass>,\r\n            data.get(\"stepHistory\") as MutableMap<String, StepHistoryClass>,\r\n            data.get(\"questionnaireHistory\") as MutableMap<String, QuestionnaireHistoryClass>\r\n        )\r\n        return member\r\n    }\r\n\r\n    /*\r\n    Specification for each of the update database functions\r\n    Pre-Condition:\r\n        id: take in the current users ID\r\n        newvalue: will replace the value in the firebasedata\r\n    Post-Condition:\r\n        Update database\r\n\r\n     // TODO: These need to append to the Firebase data, not replace it as it currently does.\r\n\r\n     */\r\n    fun updateFirstNameFor(id: String, newName: String) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/firstName\") // this is the path\r\n        // directly to the item in Firebase\r\n        myReference.setValue(newName)\r\n    }\r\n    fun updateLastNameFor(id: String, newName: String) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/lastName\")\r\n        myReference.setValue(newName)\r\n    }\r\n    fun updateStepCountGoalFor(id: String, newGoal: Int) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/stepGoal\")\r\n        myReference.setValue(newGoal)\r\n    }\r\n    fun updateAdminStatusFor(id: String, newStatus: Boolean) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/isAdmin\")\r\n        myReference.setValue(newStatus)\r\n    }\r\n    fun updateStepHistoryFor(id: String, newHistory: Map<String, StepHistoryClass>) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/stepHistory\")\r\n        myReference.setValue(newHistory)\r\n    }\r\n    fun updateQuestionnaireHistoryFor(\r\n        id: String,\r\n        newHistory: Map<String, QuestionnaireHistoryClass>\r\n    ) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/questionnaireHistory\")\r\n        myReference.setValue(newHistory)\r\n    }\r\n    fun updateUsageHistoryFor(id: String, newHistory: Map<String, UsageHistoryClass>) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/usageHistory\")\r\n        myReference.setValue(newHistory)\r\n    }\r\n    fun updateGamificationHistory(id: String, newHistory: Map<String, GamificationHistoryClass>) {\r\n        val database = Firebase.database\r\n        val myReference = database.getReference(\"Member/$id/gamificationHistory\")\r\n        myReference.setValue(newHistory)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pulmonaryrehabilitation/model_database/DatabaseMethod.kt b/app/src/main/java/com/example/pulmonaryrehabilitation/model_database/DatabaseMethod.kt
--- a/app/src/main/java/com/example/pulmonaryrehabilitation/model_database/DatabaseMethod.kt	
+++ b/app/src/main/java/com/example/pulmonaryrehabilitation/model_database/DatabaseMethod.kt	
@@ -12,7 +12,6 @@
 
 class DatabaseMethod : DatabaseInterface {
 
-
     override fun readFromDatabase(path: String, data: FirebaseDatabase) {
         val myRef = data.getReference(path)
         val dataListener = object : ValueEventListener {
@@ -85,7 +84,6 @@
         myRef.updateChildren(childUpdates)
     }
 
-
     override fun deleteFromDatabase(path: String, data: FirebaseDatabase, id: String) {
         val myRef = data.getReference(path)
 
@@ -112,7 +110,6 @@
         myRef.get().addOnSuccessListener {
 //            Log.i("firebase", "Got value ${it.value}")
             CurrentUser.setData(convertFirebaseDataToMember(it.value as HashMap<String, Any>))
-
         }.addOnFailureListener {
             Log.e("firebase", "Error getting data", it)
         }
