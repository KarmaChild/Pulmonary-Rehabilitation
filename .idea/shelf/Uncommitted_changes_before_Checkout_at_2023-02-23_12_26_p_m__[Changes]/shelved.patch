Index: app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pulmonaryrehabilitation.model_since_2_17\r\n\r\nimport android.util.Log\r\nimport com.example.pulmonaryrehabilitation.model_database.DatabaseMethod\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport java.time.Instant\r\nimport java.time.ZoneOffset\r\nimport java.time.format.DateTimeFormatter\r\n\r\n/*\r\nCurrentUser Object Specification\r\nThis is the connection to the users data. Anything you want to get or change, should be done through this.\r\nIt is a singleton because of the nature of need. We will need it on almost every activity and so passing it around\r\nseems like a poor implementation.\r\nPre-Condition:\r\ngetUserDataFor() in Database method needs to be called on a valid user ID otherwise everything will return null\r\nPost-Condition:\r\nAllow developers access to the relevant user data through internal methods.\r\n\r\nIan Kohlert\r\nFeb 19, 2023\r\n */\r\nobject CurrentUser {\r\n    private var data: MemberClass? = null\r\n    // When searching the logs, \"CurrentUser\" tag can be used to filter the logs of this class\r\n    private const val LOG_TAG: String = \"CurrentUser\"\r\n\r\n    /*\r\n    setData Method Specification\r\n    Pre-Condition:\r\n        Pass in a nullable Member Class. Other than testing, this will only be done via the method\r\n        getUserDataFor() in the DatabaseMethod file.\r\n    Post-Condition\r\n        Sets the users data in the CurrentUser object.\r\n     */\r\n    fun setData(member: MemberClass?) {\r\n        data = member\r\n        // Testing â†“\r\n//        setGoal(3333)\r\n//        addStepHistory(4999)\r\n    }\r\n\r\n    // GETTERS\r\n    /* Specification for each getter\r\n        Pre-Condition: None\r\n        Post-Condition:\r\n            It will return the desired value if 'data' has been set with a valid memberClass object\r\n            If not it returns a default value via the elvis operator (?:)\r\n            The goal of the default value is to make it clear that there was an error\r\n\r\n     */\r\n\r\n    fun getUserId(): String {\r\n        Log.d(LOG_TAG, \"getUserId() invoked\")\r\n        val user = Firebase.auth.currentUser\r\n        return if (user != null) {\r\n            user.uid\r\n        } else {\r\n            // user not signed in\r\n            Log.e(LOG_TAG, \"user not signed in\")\r\n            \"Error\"\r\n        }\r\n    }\r\n    fun getFirstName(): String {\r\n        Log.d(LOG_TAG, \"getFirstName() invoked\")\r\n        return data?.firstName ?: \"Error\"\r\n    }\r\n    fun getLastName(): String {\r\n        Log.d(LOG_TAG, \"getLastName() invoked\")\r\n        return data?.lastName ?: \"Error\"\r\n    }\r\n    fun getStepGoal(): Int {\r\n        Log.d(LOG_TAG, \"getStepGoal() invoked\")\r\n        return data?.stepGoal ?: -9999\r\n    }\r\n    fun getStepHistory(): Map<String, StepHistoryClass> {\r\n        Log.d(LOG_TAG, \"getStepHistory() invoked\")\r\n        return data?.stepHistory ?: mutableMapOf()\r\n    }\r\n    fun getGamificationHistory(): Map<String, GamificationHistoryClass> {\r\n        Log.d(LOG_TAG, \"getGamificationHistory() invoked\")\r\n        return data?.gamificationHistory ?: mutableMapOf()\r\n    }\r\n    fun getUsageHistory(): Map<String, UsageHistoryClass> {\r\n        Log.d(LOG_TAG, \"getUsageHistory() invoked\")\r\n        return data?.usageHistory ?: mutableMapOf()\r\n    }\r\n\r\n    /*\r\n    Specification for getCurrentDateTime\r\n        Pre-Condition: None\r\n        Post-Condition:\r\n            It will return the current UTC time in \"yyyy-MM-dd HH:mm:ss:SSSSSS\" format as a String\r\n     */\r\n    fun getCurrentDateTime(): String {\r\n        Log.d(LOG_TAG, \"getCurrentDateTime() invoked\")\r\n\r\n        return DateTimeFormatter\r\n            .ofPattern(\"yyyy-MM-dd HH:mm:ss:SSSSSS\")\r\n            .withZone(ZoneOffset.UTC)\r\n            .format(Instant.now())\r\n    }\r\n    fun getQuestionnaireHistory(): Map<String, QuestionnaireHistoryClass> {\r\n        Log.d(LOG_TAG, \"getQuestionnaireHistory() invoked\")\r\n        return data?.questionnaireHistory ?: mutableMapOf()\r\n    }\r\n    // END GETTERS\r\n\r\n    // SETTERS\r\n    /*\r\n    Specification for each setter\r\n    Pre-Condition:\r\n        The new value you wish to add to the database\r\n    Post-Condition:\r\n        Updates the local 'data' object to avoid an unnecessary read\r\n        Updates the Firebase database\r\n\r\n     // note for below, it's safe to use !! because I check it's not null\r\n\r\n     TODO: create a function that creates a timestamp and replace the hard coded 'Timestamp' string\r\n     TODO: Once we can append to Firebase objects the collection write functions need to be\r\n      updated to only send the new value\r\n\r\n     */\r\n    fun setFirstName(newName: String) {\r\n        Log.d(LOG_TAG, \"setFirstName() invoked\")\r\n        if (data != null) {\r\n            data?.firstName = newName\r\n            DatabaseMethod().updateFirstNameFor(data!!.id, newName)\r\n        }\r\n    }\r\n\r\n    fun setLastName(newName: String) {\r\n        Log.d(LOG_TAG, \"setLastName() invoked\")\r\n        if (data != null) {\r\n            data?.lastName = newName\r\n            DatabaseMethod().updateLastNameFor(data!!.id, newName)\r\n        }\r\n    }\r\n    fun setAdminStatus(newStatus: Boolean) {\r\n        Log.d(LOG_TAG, \"setAdminStatus() invoked\")\r\n        if (data != null) {\r\n            data?.isAdmin = newStatus\r\n            DatabaseMethod().updateAdminStatusFor(data!!.id, newStatus)\r\n        }\r\n    }\r\n    fun setGoal(newGoal: Int) {\r\n        Log.d(LOG_TAG, \"setGoal() invoked\")\r\n        if (data != null) {\r\n            data?.stepGoal = newGoal\r\n            DatabaseMethod().updateStepCountGoalFor(data!!.id, newGoal)\r\n        }\r\n    }\r\n    fun addStepHistory(numberSteps: Int) {\r\n        Log.d(LOG_TAG, \"addStepHistory() invoked\")\r\n        if (data != null) {\r\n            val timestamp: String = getCurrentDateTime()\r\n            data!!.stepHistory.put(timestamp, StepHistoryClass(numberSteps.toString(), \"\"))\r\n            DatabaseMethod().updateStepHistoryFor(data!!.id, data!!.stepHistory)\r\n        }\r\n    }\r\n    fun addQuestionnaireHistory(question: String, answer: String) {\r\n        Log.d(LOG_TAG, \"addQuestionnaireHistory() invoked\")\r\n        val timestamp: String = getCurrentDateTime()\r\n        if (data != null) {\r\n            data!!.questionnaireHistory[timestamp] =\r\n                QuestionnaireHistoryClass(question, answer)\r\n            DatabaseMethod().updateQuestionnaireHistoryFor(data!!.id, data!!.questionnaireHistory)\r\n        }\r\n    }\r\n    fun addUsageHistory(exerciseDone: String) {\r\n        Log.d(LOG_TAG, \"addUsageHistory() invoked\")\r\n        val timestamp: String = getCurrentDateTime()\r\n        if (data != null) {\r\n            data!!.usageHistory.put(timestamp, UsageHistoryClass(exerciseDone, \"\"))\r\n            DatabaseMethod().updateUsageHistoryFor(data!!.id, data!!.usageHistory)\r\n        }\r\n    }\r\n    fun addGamificationHistory(event: String, points: String) {\r\n        Log.d(LOG_TAG, \"addGamificationHistory() invoked\")\r\n        if (data != null) {\r\n            val timestamp: String = getCurrentDateTime()\r\n            data!!.gamificationHistory.put(timestamp, GamificationHistoryClass(event, points))\r\n            DatabaseMethod().updateGamificationHistory(data!!.id, data!!.gamificationHistory)\r\n        }\r\n    }\r\n\r\n    // END SETTERS\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt b/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt
--- a/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt	(revision 060953fbad888d38e440cf04a36c6acda501e2d5)
+++ b/app/src/main/java/com/example/pulmonaryrehabilitation/model_since_2_17/CurrentUser.kt	(date 1677176321124)
@@ -156,7 +156,7 @@
         Log.d(LOG_TAG, "addStepHistory() invoked")
         if (data != null) {
             val timestamp: String = getCurrentDateTime()
-            data!!.stepHistory.put(timestamp, StepHistoryClass(numberSteps.toString(), ""))
+            data!!.stepHistory[timestamp] = StepHistoryClass(numberSteps.toString(), "")
             DatabaseMethod().updateStepHistoryFor(data!!.id, data!!.stepHistory)
         }
     }
@@ -173,7 +173,7 @@
         Log.d(LOG_TAG, "addUsageHistory() invoked")
         val timestamp: String = getCurrentDateTime()
         if (data != null) {
-            data!!.usageHistory.put(timestamp, UsageHistoryClass(exerciseDone, ""))
+            data!!.usageHistory[timestamp] = UsageHistoryClass(exerciseDone, "")
             DatabaseMethod().updateUsageHistoryFor(data!!.id, data!!.usageHistory)
         }
     }
@@ -181,7 +181,7 @@
         Log.d(LOG_TAG, "addGamificationHistory() invoked")
         if (data != null) {
             val timestamp: String = getCurrentDateTime()
-            data!!.gamificationHistory.put(timestamp, GamificationHistoryClass(event, points))
+            data!!.gamificationHistory[timestamp] = GamificationHistoryClass(event, points)
             DatabaseMethod().updateGamificationHistory(data!!.id, data!!.gamificationHistory)
         }
     }
